@page "/Equate"
@inject IJSRuntime js
@using BlazorApp.Client.Models

@if (DragState != null)
{
<p>@(DragState.OnDragStart ?? string.Empty), @(DragState.OnDragEnter ?? string.Empty)</p>
}

<table border="1">
    @for (int row = 0; row < 12; row++)
    {
        <tr>
            @for (int col = 0; col < 12; col++)
            {
                string tmpData;
                tmpData = $"({row + 1}_{col + 1})";
                <td class="flex-item">
                    <div id="@tmpData"
                         Class="flex-container"
                         @ondrop="() => OnDrop()"
                         @ondragend="@(() => OnDragEnd(tmpData))"
                         draggable="true"
                         @ondragstart="@( () => OnDragStart(tmpData))"
                         @ondragenter="() => OnDragEnter(tmpData)"
                         @ondragover:preventDefault>
                        @(DataMatrix[row,col])
                    </div>
                </td>
            }
        </tr>
    }
</table>

@code {
    private string strDragStart = "...";
    private string strDragEnd = "...";
    private string[,] DataMatrix = new string[12, 12];
    private DragAndDropState<string> DragState = new DragAndDropState<string>();

    private void OnDragEnter(string tmpData)
    {
        DragState.OnDragEnter = tmpData;
        strDragEnd = tmpData;
    }

    private void OnDrop()
    {
        strDragEnd = "Dropped";
    }

    private void OnDragEnd(string e)
    {
        strDragEnd = $"Drag Ended: {e}";
    }

    private void OnDragStart(string e)
    {
        DragState.OnDragStart = e;
        strDragStart = $"Drag Started: {e}";
    }

    protected override void OnInitialized()
    {
        for (int row = 0; row < 12; row++)
        {
            for (int col = 0; col < 12; col++)
            {
                DataMatrix[row, col] = $"({row + 1}_{col + 1})";
            }
        }
        base.OnInitialized();
    }
}
